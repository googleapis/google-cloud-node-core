// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

import * as gax from 'google-gax';
import * as path from 'path';
import * as protobuf from 'protobufjs';

import * as packageJson from '../../package.json';
import * as protos from '../../pbjs-genfiles/protos';
import * as gapicConfig from './echo_client_config.json';

const version = packageJson.version;

export interface ClientOptions extends gax.GrpcClientOptions,
                                       gax.GoogleAuthOptions,
                                       gax.ClientStubOptions {
  libName?: string;
  libVersion?: string;
  clientConfig?: gax.ClientConfig;
}

interface Descriptors {
  page: {[name: string]: gax.PageDescriptor};
  stream: {[name: string]: gax.StreamDescriptor};
  longrunning: {[name: string]: gax.LongrunningDescriptor};
}

export interface Callback<
    ResponseObject, NextRequestObject, RawResponseObject> {
  (err: Error|null|undefined, value?: ResponseObject|null,
   nextRequest?: NextRequestObject, rawResponse?: RawResponseObject): void;
}

export class LanguageServiceClient {
  private _descriptors: Descriptors = {page: {}, stream: {}, longrunning: {}};
  private _innerApiCalls: {[name: string]: Function};
  auth: gax.GoogleAuth;

  constructor(opts: ClientOptions) {
    // Ensure that options include the service address and port.
    opts = Object.assign(
        {
          clientConfig: {},
          port: (this.constructor as typeof LanguageServiceClient).port,
          servicePath: (this.constructor as typeof LanguageServiceClient).servicePath,
        },
        opts);

    // Create a `gaxGrpc` object, with any grpc-specific options
    // sent to the client.
    opts.scopes = (this.constructor as typeof LanguageServiceClient).scopes;
    const gaxGrpc = new gax.GrpcClient(opts);

    // Save the auth object to the client, for use by other methods.
    this.auth = gaxGrpc.auth;

    // Determine the client header string.
    const clientHeader = [
      `gl-node/${process.version}`,
      `grpc/${gaxGrpc.grpcVersion}`,
      `gax/${gax.version}`,
      `gapic/${version}`,
    ];
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }

    const gaxProtos = Object.assign(
        {},
        gaxGrpc.loadProto(
            path.join(__dirname, '..', '..', 'protos'),
            'google/cloud/language/v1/language_service.proto'));

    // Put together the default options sent with requests.
    const defaults = gaxGrpc.constructSettings(
        'google.cloud.language.v1.LanguageService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this._innerApiCalls = {};

    // Put together the "service stub" for
    // google.showcase.v1alpha2.Echo.
    const languageServiceStub =
        // @ts-ignore We cannot check types that are loaded in runtime.
        gaxGrpc.createStub(gaxProtos.google.cloud.language.v1.LanguageService, opts);

    const languageServiceStubMethods =
        ['analyzeSentiment', 'analyzeEntities', 'analyzeEntitySentiment', 'analyzeSyntax', 'classifyText', 'annotateText'];

    for (const methodName of echoStubMethods) {
      this._innerApiCalls[methodName] = gax.createApiCall(
          languageServiceStub.then(
              // @ts-ignore
              stub => (...args) => {
                stub[methodName].apply(stub, args);
              },
              (err: Error|null|undefined) => () => {
                throw err;
              }),
          defaults[methodName],
          this._descriptors.page[methodName] ||
              this._descriptors.stream[methodName] ||
              this._descriptors.longrunning[methodName]);
    }
  }

  /**
   * The DNS address for this API service.
   */
  static get servicePath() {
    return '';
  }

  /**
   * The port for this API service.
   */
  static get port() {
    return 0;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-language',
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  /**
   * Return the project ID used by this class.
   * @param {function(Error, string)} callback - the callback to
   *   be called with the current project Id.
   */
  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  analyzeSentiment(
      request: protos.google.cloud.language.v1.IAnalyzeSentimentRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.cloud.language.v1.IAnalyzeSentimentResponse,
        protos.google.cloud.language.v1.IAnalyzeSentimentRequest|undefined, {}|undefined
      ]>;
  analyzeSentiment(
      request: protos.google.cloud.language.v1.IAnalyzeSentimentRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.cloud.language.v1.IAnalyzeSentimentResponse,
          protos.google.cloud.language.v1.IAnalyzeSentimentRequest|undefined,
          {}|undefined>): void;
  analyzeSentiment(
      request: protos.google.cloud.language.v1.IAnalyzeSentimentRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.cloud.language.v1.IAnalyzeSentimentResponse,
          protos.google.cloud.language.v1.IAnalyzeSentimentRequest|undefined, {}|undefined>,
      callback?: Callback<
          protos.google.cloud.language.v1.IAnalyzeSentimentResponse,
          protos.google.cloud.language.v1.IAnalyzeSentimentRequest|undefined,
          {}|undefined>):
      Promise<[
        protos.google.cloud.language.v1.IAnalyzeSentimentResponse,
        protos.google.cloud.language.v1.IAnalyzeSentimentRequest|undefined, {}|undefined
      ]>|void {
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.analyzeSentiment(request, options, callback);
  }
  analyzeEntities(
      request: protos.google.cloud.language.v1.IAnalyzeEntitiesRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.cloud.language.v1.IAnalyzeEntitiesResponse,
        protos.google.cloud.language.v1.IAnalyzeEntitiesRequest|undefined, {}|undefined
      ]>;
  analyzeEntities(
      request: protos.google.cloud.language.v1.IAnalyzeEntitiesRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.cloud.language.v1.IAnalyzeEntitiesResponse,
          protos.google.cloud.language.v1.IAnalyzeEntitiesRequest|undefined,
          {}|undefined>): void;
  analyzeEntities(
      request: protos.google.cloud.language.v1.IAnalyzeEntitiesRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.cloud.language.v1.IAnalyzeEntitiesResponse,
          protos.google.cloud.language.v1.IAnalyzeEntitiesRequest|undefined, {}|undefined>,
      callback?: Callback<
          protos.google.cloud.language.v1.IAnalyzeEntitiesResponse,
          protos.google.cloud.language.v1.IAnalyzeEntitiesRequest|undefined,
          {}|undefined>):
      Promise<[
        protos.google.cloud.language.v1.IAnalyzeEntitiesResponse,
        protos.google.cloud.language.v1.IAnalyzeEntitiesRequest|undefined, {}|undefined
      ]>|void {
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.analyzeEntities(request, options, callback);
  }
  analyzeEntitySentiment(
      request: protos.google.cloud.language.v1.IAnalyzeEntitySentimentRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.cloud.language.v1.IAnalyzeEntitySentimentResponse,
        protos.google.cloud.language.v1.IAnalyzeEntitySentimentRequest|undefined, {}|undefined
      ]>;
  analyzeEntitySentiment(
      request: protos.google.cloud.language.v1.IAnalyzeEntitySentimentRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.cloud.language.v1.IAnalyzeEntitySentimentResponse,
          protos.google.cloud.language.v1.IAnalyzeEntitySentimentRequest|undefined,
          {}|undefined>): void;
  analyzeEntitySentiment(
      request: protos.google.cloud.language.v1.IAnalyzeEntitySentimentRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.cloud.language.v1.IAnalyzeEntitySentimentResponse,
          protos.google.cloud.language.v1.IAnalyzeEntitySentimentRequest|undefined, {}|undefined>,
      callback?: Callback<
          protos.google.cloud.language.v1.IAnalyzeEntitySentimentResponse,
          protos.google.cloud.language.v1.IAnalyzeEntitySentimentRequest|undefined,
          {}|undefined>):
      Promise<[
        protos.google.cloud.language.v1.IAnalyzeEntitySentimentResponse,
        protos.google.cloud.language.v1.IAnalyzeEntitySentimentRequest|undefined, {}|undefined
      ]>|void {
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.analyzeEntitySentiment(request, options, callback);
  }
  analyzeSyntax(
      request: protos.google.cloud.language.v1.IAnalyzeSyntaxRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.cloud.language.v1.IAnalyzeSyntaxResponse,
        protos.google.cloud.language.v1.IAnalyzeSyntaxRequest|undefined, {}|undefined
      ]>;
  analyzeSyntax(
      request: protos.google.cloud.language.v1.IAnalyzeSyntaxRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.cloud.language.v1.IAnalyzeSyntaxResponse,
          protos.google.cloud.language.v1.IAnalyzeSyntaxRequest|undefined,
          {}|undefined>): void;
  analyzeSyntax(
      request: protos.google.cloud.language.v1.IAnalyzeSyntaxRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.cloud.language.v1.IAnalyzeSyntaxResponse,
          protos.google.cloud.language.v1.IAnalyzeSyntaxRequest|undefined, {}|undefined>,
      callback?: Callback<
          protos.google.cloud.language.v1.IAnalyzeSyntaxResponse,
          protos.google.cloud.language.v1.IAnalyzeSyntaxRequest|undefined,
          {}|undefined>):
      Promise<[
        protos.google.cloud.language.v1.IAnalyzeSyntaxResponse,
        protos.google.cloud.language.v1.IAnalyzeSyntaxRequest|undefined, {}|undefined
      ]>|void {
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.analyzeSyntax(request, options, callback);
  }
  classifyText(
      request: protos.google.cloud.language.v1.IClassifyTextRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.cloud.language.v1.IClassifyTextResponse,
        protos.google.cloud.language.v1.IClassifyTextRequest|undefined, {}|undefined
      ]>;
  classifyText(
      request: protos.google.cloud.language.v1.IClassifyTextRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.cloud.language.v1.IClassifyTextResponse,
          protos.google.cloud.language.v1.IClassifyTextRequest|undefined,
          {}|undefined>): void;
  classifyText(
      request: protos.google.cloud.language.v1.IClassifyTextRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.cloud.language.v1.IClassifyTextResponse,
          protos.google.cloud.language.v1.IClassifyTextRequest|undefined, {}|undefined>,
      callback?: Callback<
          protos.google.cloud.language.v1.IClassifyTextResponse,
          protos.google.cloud.language.v1.IClassifyTextRequest|undefined,
          {}|undefined>):
      Promise<[
        protos.google.cloud.language.v1.IClassifyTextResponse,
        protos.google.cloud.language.v1.IClassifyTextRequest|undefined, {}|undefined
      ]>|void {
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.classifyText(request, options, callback);
  }
  annotateText(
      request: protos.google.cloud.language.v1.IAnnotateTextRequest,
      options?: gax.CallOptions):
      Promise<[
        protos.google.cloud.language.v1.IAnnotateTextResponse,
        protos.google.cloud.language.v1.IAnnotateTextRequest|undefined, {}|undefined
      ]>;
  annotateText(
      request: protos.google.cloud.language.v1.IAnnotateTextRequest,
      options: gax.CallOptions,
      callback: Callback<
          protos.google.cloud.language.v1.IAnnotateTextResponse,
          protos.google.cloud.language.v1.IAnnotateTextRequest|undefined,
          {}|undefined>): void;
  annotateText(
      request: protos.google.cloud.language.v1.IAnnotateTextRequest,
      optionsOrCallback?: gax.CallOptions|Callback<
          protos.google.cloud.language.v1.IAnnotateTextResponse,
          protos.google.cloud.language.v1.IAnnotateTextRequest|undefined, {}|undefined>,
      callback?: Callback<
          protos.google.cloud.language.v1.IAnnotateTextResponse,
          protos.google.cloud.language.v1.IAnnotateTextRequest|undefined,
          {}|undefined>):
      Promise<[
        protos.google.cloud.language.v1.IAnnotateTextResponse,
        protos.google.cloud.language.v1.IAnnotateTextRequest|undefined, {}|undefined
      ]>|void {
    let options = optionsOrCallback;
    if (typeof options === 'function' && callback === undefined) {
      callback = options;
      options = {};
    }
    options = options || {};
    return this._innerApiCalls.annotateText(request, options, callback);
  }

  test() {
    console.log(protos);
  }
}
